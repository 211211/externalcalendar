/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.16.1.0 (NJsonSchema v9.10.41.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { Http, Headers, ResponseContentType, Response } from '@angular/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IAccountsService {
    /**
     * Get Information about the logged in user
     */
    loggedInUser(): Observable<UserReturnModel>;
    /**
     * Change the password of the logged in user.
     * @return OK
     */
    changePassword(model: ChangePasswordModel): Observable<void>;
    /**
     * Forget password
     * @return OK
     */
    forgetPassword(model: ForgetPasswordBindingModel): Observable<any>;
    /**
     * Reset password
     * @return OK
     */
    resetPassword(model: ResetPasswordBindingModel): Observable<any>;
}

@Injectable()
export class AccountsService implements IAccountsService {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://sportsanalyticsinc-demo.azurewebsites.net";
    }

    /**
     * Get Information about the logged in user
     */
    loggedInUser(): Observable<UserReturnModel> {
        let url_ = this.baseUrl + "/accounts/loggedInUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processLoggedInUser(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processLoggedInUser(<any>response_);
                } catch (e) {
                    return <Observable<UserReturnModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<UserReturnModel>><any>Observable.throw(response_);
        });
    }

    protected processLoggedInUser(response: Response): Observable<UserReturnModel> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            result200 = _responseText === "" ? null : <UserReturnModel>jsonParse(_responseText, this.jsonParseReviver);
            return Observable.of(result200);
        } else if (status === 400) {
            const _responseText = response.text();
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status === 401) {
            const _responseText = response.text();
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status === 404) {
            const _responseText = response.text();
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<UserReturnModel>(<any>null);
    }

    /**
     * Change the password of the logged in user.
     * @return OK
     */
    changePassword(model: ChangePasswordModel): Observable<void> {
        let url_ = this.baseUrl + "/accounts/changePassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processChangePassword(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processChangePassword(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processChangePassword(response: Response): Observable<void> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.text();
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status === 401) {
            const _responseText = response.text();
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status === 404) {
            const _responseText = response.text();
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * Forget password
     * @return OK
     */
    forgetPassword(model: ForgetPasswordBindingModel): Observable<any> {
        let url_ = this.baseUrl + "/accounts/forgetPassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processForgetPassword(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processForgetPassword(<any>response_);
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response_);
        });
    }

    protected processForgetPassword(response: Response): Observable<any> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            result200 = _responseText === "" ? null : <any>jsonParse(_responseText, this.jsonParseReviver);
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<any>(<any>null);
    }

    /**
     * Reset password
     * @return OK
     */
    resetPassword(model: ResetPasswordBindingModel): Observable<any> {
        let url_ = this.baseUrl + "/accounts/resetPassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processResetPassword(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processResetPassword(<any>response_);
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response_);
        });
    }

    protected processResetPassword(response: Response): Observable<any> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            result200 = _responseText === "" ? null : <any>jsonParse(_responseText, this.jsonParseReviver);
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<any>(<any>null);
    }
}

export interface IService {
    /**
     * Get a facility by id.
     */
    facility(facilityId: number): Observable<FacilityViewModel>;
}

@Injectable()
export class Service implements IService {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://sportsanalyticsinc-demo.azurewebsites.net";
    }

    /**
     * Get a facility by id.
     */
    facility(facilityId: number): Observable<FacilityViewModel> {
        let url_ = this.baseUrl + "/facility/{facilityId}";
        if (facilityId === undefined || facilityId === null)
            throw new Error("The parameter 'facilityId' must be defined.");
        url_ = url_.replace("{facilityId}", encodeURIComponent("" + facilityId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processFacility(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processFacility(<any>response_);
                } catch (e) {
                    return <Observable<FacilityViewModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<FacilityViewModel>><any>Observable.throw(response_);
        });
    }

    protected processFacility(response: Response): Observable<FacilityViewModel> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            result200 = _responseText === "" ? null : <FacilityViewModel>jsonParse(_responseText, this.jsonParseReviver);
            return Observable.of(result200);
        } else if (status === 500) {
            const _responseText = response.text();
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<FacilityViewModel>(<any>null);
    }
}

export interface IFacilityService {
    /**
     * Get a facility by id.
     */
    all(): Observable<FacilityViewModel[]>;
}

@Injectable()
export class FacilityService implements IFacilityService {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://sportsanalyticsinc-demo.azurewebsites.net";
    }

    /**
     * Get a facility by id.
     */
    all(): Observable<FacilityViewModel[]> {
        let url_ = this.baseUrl + "/facility/all";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processAll(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processAll(<any>response_);
                } catch (e) {
                    return <Observable<FacilityViewModel[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<FacilityViewModel[]>><any>Observable.throw(response_);
        });
    }

    protected processAll(response: Response): Observable<FacilityViewModel[]> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            result200 = _responseText === "" ? null : <FacilityViewModel[]>jsonParse(_responseText, this.jsonParseReviver);
            return Observable.of(result200);
        } else if (status === 500) {
            const _responseText = response.text();
            return throwException("A server error occurred.", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<FacilityViewModel[]>(<any>null);
    }
}

export interface UserReturnModel {
    userId?: string | undefined;
    email?: string | undefined;
    level?: number | undefined;
    roles?: string[] | undefined;
    firstTimeUser?: boolean | undefined;
    playerId?: number | undefined;
    coachId?: number | undefined;
    facilityId?: number | undefined;
    parentId?: number | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
}

export interface ChangePasswordModel {
    oldPassword: string;
    newPassword: string;
    confirmPassword: string;
}

export interface ChangeEmailModel {
    oldEmail: string;
    newEmail: string;
    userId: string;
}

export interface ForgetPasswordBindingModel {
    email: string;
    deviceType?: string | undefined;
}

export interface ResetPasswordBindingModel {
    /** Gets or sets the email address. */
    email: string;
    /** Gets or sets the password. */
    password: string;
    /** Gets or sets the confirm password. */
    confirmPassword?: string | undefined;
    code?: string | undefined;
}

export interface FacilityViewModel {
    facilityId?: number | undefined;
    address1?: string | undefined;
    address2?: string | undefined;
    city?: string | undefined;
    state_Province?: string | undefined;
    zipCode_MailCode?: string | undefined;
    phone?: string | undefined;
    facilityTypeId?: number | undefined;
    numOfOutdoorHardCourts?: number | undefined;
    numOfIndoorHardCourts?: number | undefined;
    numOfClayCourts?: number | undefined;
    numOfGrassCourts?: number | undefined;
    ustaSectionId?: number | undefined;
    facilityName?: string | undefined;
    ustaSectionName?: string | undefined;
    facilityTypeDescription?: string | undefined;
    numberOfGroups?: number | undefined;
    maleCount?: number | undefined;
    femaleCount?: number | undefined;
    coachCount?: number | undefined;
    facilitySubscriptionPlanName?: string | undefined;
    eavalScoreTypeId?: number | undefined;
}

function jsonParse(json: any, reviver?: any) {
    json = JSON.parse(json, reviver);

    var byid: any = {};
    var refs: any = [];
    json = (function recurse(obj: any, prop?: any, parent?: any) {
        if (typeof obj !== 'object' || !obj)
            return obj;
        
        if ("$ref" in obj) {
            let ref = obj.$ref;
            if (ref in byid)
                return byid[ref];
            refs.push([parent, prop, ref]);
            return undefined;
        } else if ("$id" in obj) {
            let id = obj.$id;
            delete obj.$id;
            if ("$values" in obj)
                obj = obj.$values;
            byid[id] = obj;
        }
        
        if (Array.isArray(obj)) {
            obj = obj.map((v, i) => recurse(v, i, obj));
        } else {
            for (var p in obj) {
                if (obj.hasOwnProperty(p) && obj[p] && typeof obj[p] === 'object')
                    obj[p] = recurse(obj[p], p, obj);
            }
        }

        return obj;
    })(json);

    for (let i = 0; i < refs.length; i++) {
        const ref = refs[i];
        ref[0][ref[1]] = byid[ref[2]];
    }

    return json;
}

function createInstance<T>(data: any, mappings: any, type: any): T {
    if (!mappings)
        mappings = [];
    else {
        let mapping = mappings.filter((m: any) => m.source === data);
        if (mapping.length === 1)
            return <T>mapping[0].target;
    }

    let result: any = new type();
    mappings.push({ source: data, target: result });
    result.init(data, mappings);
    return result;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = function() { 
                observer.next(this.result);
                observer.complete();
            }
            reader.readAsText(blob); 
        }
    });
}